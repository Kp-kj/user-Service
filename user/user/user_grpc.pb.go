// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_Ping_FullMethodName                          = "/user.User/Ping"
	User_CheckTwitterId_FullMethodName                = "/user.User/CheckTwitterId"
	User_CreateUser_FullMethodName                    = "/user.User/CreateUser"
	User_CreateInvite_FullMethodName                  = "/user.User/CreateInvite"
	User_CheckTodayInvite_FullMethodName              = "/user.User/CheckTodayInvite"
	User_AddUserInfo_FullMethodName                   = "/user.User/AddUserInfo"
	User_QueryUser_FullMethodName                     = "/user.User/QueryUser"
	User_AddAdmin_FullMethodName                      = "/user.User/AddAdmin"
	User_AdminLogin_FullMethodName                    = "/user.User/AdminLogin"
	User_RemoveAdmin_FullMethodName                   = "/user.User/RemoveAdmin"
	User_AddBlackList_FullMethodName                  = "/user.User/AddBlackList"
	User_QueryBlackList_FullMethodName                = "/user.User/QueryBlackList"
	User_RemoveBlackList_FullMethodName               = "/user.User/RemoveBlackList"
	User_GetHelpCategories_FullMethodName             = "/user.User/GetHelpCategories"
	User_CreateHelpCategory_FullMethodName            = "/user.User/CreateHelpCategory"
	User_DeleteHelpCategory_FullMethodName            = "/user.User/DeleteHelpCategory"
	User_EditHelpCategory_FullMethodName              = "/user.User/EditHelpCategory"
	User_CreateHelpCategoryTranslation_FullMethodName = "/user.User/CreateHelpCategoryTranslation"
	User_DeleteHelpCategoryTranslation_FullMethodName = "/user.User/DeleteHelpCategoryTranslation"
	User_GetHelpCategoryTranslations_FullMethodName   = "/user.User/GetHelpCategoryTranslations"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CheckTwitterId(ctx context.Context, in *CheckTwitterIdRequest, opts ...grpc.CallOption) (*CheckTwitterIdResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	CreateInvite(ctx context.Context, in *CreateInviteRequest, opts ...grpc.CallOption) (*CreateInviteResponse, error)
	CheckTodayInvite(ctx context.Context, in *CheckTodayInviteRequest, opts ...grpc.CallOption) (*CheckTodayInviteResponse, error)
	AddUserInfo(ctx context.Context, in *AddUserInfoRequest, opts ...grpc.CallOption) (*AddUserInfoResponse, error)
	QueryUser(ctx context.Context, in *QueryUserRequest, opts ...grpc.CallOption) (*QueryUserResponse, error)
	AddAdmin(ctx context.Context, in *AddAdminRequest, opts ...grpc.CallOption) (*AddAdminResponse, error)
	AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error)
	RemoveAdmin(ctx context.Context, in *RemoveAdminRequest, opts ...grpc.CallOption) (*RemoveAdminResponse, error)
	AddBlackList(ctx context.Context, in *AddBlackListRequest, opts ...grpc.CallOption) (*AddBlackListResponse, error)
	QueryBlackList(ctx context.Context, in *QueryBlackListRequest, opts ...grpc.CallOption) (*QueryBlackListResponse, error)
	RemoveBlackList(ctx context.Context, in *RemoveBlackListRequest, opts ...grpc.CallOption) (*RemoveBlackListResponse, error)
	GetHelpCategories(ctx context.Context, in *GetHelpCategoriesRequest, opts ...grpc.CallOption) (*GetHelpCategoriesResponse, error)
	CreateHelpCategory(ctx context.Context, in *CreateHelpCategoryRequest, opts ...grpc.CallOption) (*CreateHelpCategoryResponse, error)
	DeleteHelpCategory(ctx context.Context, in *DeleteHelpCategoryRequest, opts ...grpc.CallOption) (*DeleteHelpCategoryResponse, error)
	EditHelpCategory(ctx context.Context, in *EditHelpCategoryRequest, opts ...grpc.CallOption) (*EditHelpCategoryResponse, error)
	CreateHelpCategoryTranslation(ctx context.Context, in *CreateHelpCategoryTranslationRequest, opts ...grpc.CallOption) (*CreateHelpCategoryTranslationResponse, error)
	DeleteHelpCategoryTranslation(ctx context.Context, in *DeleteHelpCategoryTranslationRequest, opts ...grpc.CallOption) (*DeleteHelpCategoryTranslationResponse, error)
	GetHelpCategoryTranslations(ctx context.Context, in *GetHelpCategoryTranslationsRequest, opts ...grpc.CallOption) (*GetHelpCategoryTranslationsResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, User_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckTwitterId(ctx context.Context, in *CheckTwitterIdRequest, opts ...grpc.CallOption) (*CheckTwitterIdResponse, error) {
	out := new(CheckTwitterIdResponse)
	err := c.cc.Invoke(ctx, User_CheckTwitterId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, User_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateInvite(ctx context.Context, in *CreateInviteRequest, opts ...grpc.CallOption) (*CreateInviteResponse, error) {
	out := new(CreateInviteResponse)
	err := c.cc.Invoke(ctx, User_CreateInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckTodayInvite(ctx context.Context, in *CheckTodayInviteRequest, opts ...grpc.CallOption) (*CheckTodayInviteResponse, error) {
	out := new(CheckTodayInviteResponse)
	err := c.cc.Invoke(ctx, User_CheckTodayInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUserInfo(ctx context.Context, in *AddUserInfoRequest, opts ...grpc.CallOption) (*AddUserInfoResponse, error) {
	out := new(AddUserInfoResponse)
	err := c.cc.Invoke(ctx, User_AddUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryUser(ctx context.Context, in *QueryUserRequest, opts ...grpc.CallOption) (*QueryUserResponse, error) {
	out := new(QueryUserResponse)
	err := c.cc.Invoke(ctx, User_QueryUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddAdmin(ctx context.Context, in *AddAdminRequest, opts ...grpc.CallOption) (*AddAdminResponse, error) {
	out := new(AddAdminResponse)
	err := c.cc.Invoke(ctx, User_AddAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error) {
	out := new(AdminLoginResponse)
	err := c.cc.Invoke(ctx, User_AdminLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RemoveAdmin(ctx context.Context, in *RemoveAdminRequest, opts ...grpc.CallOption) (*RemoveAdminResponse, error) {
	out := new(RemoveAdminResponse)
	err := c.cc.Invoke(ctx, User_RemoveAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddBlackList(ctx context.Context, in *AddBlackListRequest, opts ...grpc.CallOption) (*AddBlackListResponse, error) {
	out := new(AddBlackListResponse)
	err := c.cc.Invoke(ctx, User_AddBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryBlackList(ctx context.Context, in *QueryBlackListRequest, opts ...grpc.CallOption) (*QueryBlackListResponse, error) {
	out := new(QueryBlackListResponse)
	err := c.cc.Invoke(ctx, User_QueryBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RemoveBlackList(ctx context.Context, in *RemoveBlackListRequest, opts ...grpc.CallOption) (*RemoveBlackListResponse, error) {
	out := new(RemoveBlackListResponse)
	err := c.cc.Invoke(ctx, User_RemoveBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetHelpCategories(ctx context.Context, in *GetHelpCategoriesRequest, opts ...grpc.CallOption) (*GetHelpCategoriesResponse, error) {
	out := new(GetHelpCategoriesResponse)
	err := c.cc.Invoke(ctx, User_GetHelpCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateHelpCategory(ctx context.Context, in *CreateHelpCategoryRequest, opts ...grpc.CallOption) (*CreateHelpCategoryResponse, error) {
	out := new(CreateHelpCategoryResponse)
	err := c.cc.Invoke(ctx, User_CreateHelpCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteHelpCategory(ctx context.Context, in *DeleteHelpCategoryRequest, opts ...grpc.CallOption) (*DeleteHelpCategoryResponse, error) {
	out := new(DeleteHelpCategoryResponse)
	err := c.cc.Invoke(ctx, User_DeleteHelpCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EditHelpCategory(ctx context.Context, in *EditHelpCategoryRequest, opts ...grpc.CallOption) (*EditHelpCategoryResponse, error) {
	out := new(EditHelpCategoryResponse)
	err := c.cc.Invoke(ctx, User_EditHelpCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateHelpCategoryTranslation(ctx context.Context, in *CreateHelpCategoryTranslationRequest, opts ...grpc.CallOption) (*CreateHelpCategoryTranslationResponse, error) {
	out := new(CreateHelpCategoryTranslationResponse)
	err := c.cc.Invoke(ctx, User_CreateHelpCategoryTranslation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteHelpCategoryTranslation(ctx context.Context, in *DeleteHelpCategoryTranslationRequest, opts ...grpc.CallOption) (*DeleteHelpCategoryTranslationResponse, error) {
	out := new(DeleteHelpCategoryTranslationResponse)
	err := c.cc.Invoke(ctx, User_DeleteHelpCategoryTranslation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetHelpCategoryTranslations(ctx context.Context, in *GetHelpCategoryTranslationsRequest, opts ...grpc.CallOption) (*GetHelpCategoryTranslationsResponse, error) {
	out := new(GetHelpCategoryTranslationsResponse)
	err := c.cc.Invoke(ctx, User_GetHelpCategoryTranslations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	Ping(context.Context, *Request) (*Response, error)
	CheckTwitterId(context.Context, *CheckTwitterIdRequest) (*CheckTwitterIdResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	CreateInvite(context.Context, *CreateInviteRequest) (*CreateInviteResponse, error)
	CheckTodayInvite(context.Context, *CheckTodayInviteRequest) (*CheckTodayInviteResponse, error)
	AddUserInfo(context.Context, *AddUserInfoRequest) (*AddUserInfoResponse, error)
	QueryUser(context.Context, *QueryUserRequest) (*QueryUserResponse, error)
	AddAdmin(context.Context, *AddAdminRequest) (*AddAdminResponse, error)
	AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error)
	RemoveAdmin(context.Context, *RemoveAdminRequest) (*RemoveAdminResponse, error)
	AddBlackList(context.Context, *AddBlackListRequest) (*AddBlackListResponse, error)
	QueryBlackList(context.Context, *QueryBlackListRequest) (*QueryBlackListResponse, error)
	RemoveBlackList(context.Context, *RemoveBlackListRequest) (*RemoveBlackListResponse, error)
	GetHelpCategories(context.Context, *GetHelpCategoriesRequest) (*GetHelpCategoriesResponse, error)
	CreateHelpCategory(context.Context, *CreateHelpCategoryRequest) (*CreateHelpCategoryResponse, error)
	DeleteHelpCategory(context.Context, *DeleteHelpCategoryRequest) (*DeleteHelpCategoryResponse, error)
	EditHelpCategory(context.Context, *EditHelpCategoryRequest) (*EditHelpCategoryResponse, error)
	CreateHelpCategoryTranslation(context.Context, *CreateHelpCategoryTranslationRequest) (*CreateHelpCategoryTranslationResponse, error)
	DeleteHelpCategoryTranslation(context.Context, *DeleteHelpCategoryTranslationRequest) (*DeleteHelpCategoryTranslationResponse, error)
	GetHelpCategoryTranslations(context.Context, *GetHelpCategoryTranslationsRequest) (*GetHelpCategoryTranslationsResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUserServer) CheckTwitterId(context.Context, *CheckTwitterIdRequest) (*CheckTwitterIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTwitterId not implemented")
}
func (UnimplementedUserServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) CreateInvite(context.Context, *CreateInviteRequest) (*CreateInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvite not implemented")
}
func (UnimplementedUserServer) CheckTodayInvite(context.Context, *CheckTodayInviteRequest) (*CheckTodayInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTodayInvite not implemented")
}
func (UnimplementedUserServer) AddUserInfo(context.Context, *AddUserInfoRequest) (*AddUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserInfo not implemented")
}
func (UnimplementedUserServer) QueryUser(context.Context, *QueryUserRequest) (*QueryUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUser not implemented")
}
func (UnimplementedUserServer) AddAdmin(context.Context, *AddAdminRequest) (*AddAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdmin not implemented")
}
func (UnimplementedUserServer) AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedUserServer) RemoveAdmin(context.Context, *RemoveAdminRequest) (*RemoveAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAdmin not implemented")
}
func (UnimplementedUserServer) AddBlackList(context.Context, *AddBlackListRequest) (*AddBlackListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlackList not implemented")
}
func (UnimplementedUserServer) QueryBlackList(context.Context, *QueryBlackListRequest) (*QueryBlackListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlackList not implemented")
}
func (UnimplementedUserServer) RemoveBlackList(context.Context, *RemoveBlackListRequest) (*RemoveBlackListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlackList not implemented")
}
func (UnimplementedUserServer) GetHelpCategories(context.Context, *GetHelpCategoriesRequest) (*GetHelpCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelpCategories not implemented")
}
func (UnimplementedUserServer) CreateHelpCategory(context.Context, *CreateHelpCategoryRequest) (*CreateHelpCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHelpCategory not implemented")
}
func (UnimplementedUserServer) DeleteHelpCategory(context.Context, *DeleteHelpCategoryRequest) (*DeleteHelpCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHelpCategory not implemented")
}
func (UnimplementedUserServer) EditHelpCategory(context.Context, *EditHelpCategoryRequest) (*EditHelpCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditHelpCategory not implemented")
}
func (UnimplementedUserServer) CreateHelpCategoryTranslation(context.Context, *CreateHelpCategoryTranslationRequest) (*CreateHelpCategoryTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHelpCategoryTranslation not implemented")
}
func (UnimplementedUserServer) DeleteHelpCategoryTranslation(context.Context, *DeleteHelpCategoryTranslationRequest) (*DeleteHelpCategoryTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHelpCategoryTranslation not implemented")
}
func (UnimplementedUserServer) GetHelpCategoryTranslations(context.Context, *GetHelpCategoryTranslationsRequest) (*GetHelpCategoryTranslationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelpCategoryTranslations not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckTwitterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTwitterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckTwitterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CheckTwitterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckTwitterId(ctx, req.(*CheckTwitterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateInvite(ctx, req.(*CreateInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckTodayInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTodayInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckTodayInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CheckTodayInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckTodayInvite(ctx, req.(*CheckTodayInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUserInfo(ctx, req.(*AddUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_QueryUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryUser(ctx, req.(*QueryUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddAdmin(ctx, req.(*AddAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminLogin(ctx, req.(*AdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RemoveAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RemoveAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RemoveAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RemoveAdmin(ctx, req.(*RemoveAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddBlackList(ctx, req.(*AddBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_QueryBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryBlackList(ctx, req.(*QueryBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RemoveBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RemoveBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RemoveBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RemoveBlackList(ctx, req.(*RemoveBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetHelpCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHelpCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetHelpCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetHelpCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetHelpCategories(ctx, req.(*GetHelpCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateHelpCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHelpCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateHelpCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateHelpCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateHelpCategory(ctx, req.(*CreateHelpCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteHelpCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelpCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteHelpCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteHelpCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteHelpCategory(ctx, req.(*DeleteHelpCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EditHelpCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditHelpCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EditHelpCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EditHelpCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EditHelpCategory(ctx, req.(*EditHelpCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateHelpCategoryTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHelpCategoryTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateHelpCategoryTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateHelpCategoryTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateHelpCategoryTranslation(ctx, req.(*CreateHelpCategoryTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteHelpCategoryTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelpCategoryTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteHelpCategoryTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteHelpCategoryTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteHelpCategoryTranslation(ctx, req.(*DeleteHelpCategoryTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetHelpCategoryTranslations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHelpCategoryTranslationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetHelpCategoryTranslations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetHelpCategoryTranslations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetHelpCategoryTranslations(ctx, req.(*GetHelpCategoryTranslationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _User_Ping_Handler,
		},
		{
			MethodName: "CheckTwitterId",
			Handler:    _User_CheckTwitterId_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "CreateInvite",
			Handler:    _User_CreateInvite_Handler,
		},
		{
			MethodName: "CheckTodayInvite",
			Handler:    _User_CheckTodayInvite_Handler,
		},
		{
			MethodName: "AddUserInfo",
			Handler:    _User_AddUserInfo_Handler,
		},
		{
			MethodName: "QueryUser",
			Handler:    _User_QueryUser_Handler,
		},
		{
			MethodName: "AddAdmin",
			Handler:    _User_AddAdmin_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _User_AdminLogin_Handler,
		},
		{
			MethodName: "RemoveAdmin",
			Handler:    _User_RemoveAdmin_Handler,
		},
		{
			MethodName: "AddBlackList",
			Handler:    _User_AddBlackList_Handler,
		},
		{
			MethodName: "QueryBlackList",
			Handler:    _User_QueryBlackList_Handler,
		},
		{
			MethodName: "RemoveBlackList",
			Handler:    _User_RemoveBlackList_Handler,
		},
		{
			MethodName: "GetHelpCategories",
			Handler:    _User_GetHelpCategories_Handler,
		},
		{
			MethodName: "CreateHelpCategory",
			Handler:    _User_CreateHelpCategory_Handler,
		},
		{
			MethodName: "DeleteHelpCategory",
			Handler:    _User_DeleteHelpCategory_Handler,
		},
		{
			MethodName: "EditHelpCategory",
			Handler:    _User_EditHelpCategory_Handler,
		},
		{
			MethodName: "CreateHelpCategoryTranslation",
			Handler:    _User_CreateHelpCategoryTranslation_Handler,
		},
		{
			MethodName: "DeleteHelpCategoryTranslation",
			Handler:    _User_DeleteHelpCategoryTranslation_Handler,
		},
		{
			MethodName: "GetHelpCategoryTranslations",
			Handler:    _User_GetHelpCategoryTranslations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
