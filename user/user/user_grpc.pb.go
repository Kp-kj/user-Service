// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_Ping_FullMethodName                          = "/user.User/Ping"
	User_RegisterCount_FullMethodName                 = "/user.User/RegisterCount"
	User_OnlineCount_FullMethodName                   = "/user.User/OnlineCount"
	User_CheckTwitterId_FullMethodName                = "/user.User/CheckTwitterId"
	User_CreateUser_FullMethodName                    = "/user.User/CreateUser"
	User_CreateInvite_FullMethodName                  = "/user.User/CreateInvite"
	User_CheckTodayInvite_FullMethodName              = "/user.User/CheckTodayInvite"
	User_AddUserInfo_FullMethodName                   = "/user.User/AddUserInfo"
	User_QueryUser_FullMethodName                     = "/user.User/QueryUser"
	User_GetUserList_FullMethodName                   = "/user.User/GetUserList"
	User_AddAdmin_FullMethodName                      = "/user.User/AddAdmin"
	User_AdminLogin_FullMethodName                    = "/user.User/AdminLogin"
	User_RemoveAdmin_FullMethodName                   = "/user.User/RemoveAdmin"
	User_AddBlackList_FullMethodName                  = "/user.User/AddBlackList"
	User_QueryBlackList_FullMethodName                = "/user.User/QueryBlackList"
	User_RemoveBlackList_FullMethodName               = "/user.User/RemoveBlackList"
	User_GetHelpCategories_FullMethodName             = "/user.User/GetHelpCategories"
	User_CreateHelpCategory_FullMethodName            = "/user.User/CreateHelpCategory"
	User_DeleteHelpCategory_FullMethodName            = "/user.User/DeleteHelpCategory"
	User_EditHelpCategory_FullMethodName              = "/user.User/EditHelpCategory"
	User_CreateHelpCategoryTranslation_FullMethodName = "/user.User/CreateHelpCategoryTranslation"
	User_DeleteHelpCategoryTranslation_FullMethodName = "/user.User/DeleteHelpCategoryTranslation"
	User_GetHelpCategoryTranslations_FullMethodName   = "/user.User/GetHelpCategoryTranslations"
	User_EditHelpCategoryTranslation_FullMethodName   = "/user.User/EditHelpCategoryTranslation"
	User_QueryHelpCategory_FullMethodName             = "/user.User/QueryHelpCategory"
	User_GetHelpDocuments_FullMethodName              = "/user.User/GetHelpDocuments"
	User_CreateHelpDocument_FullMethodName            = "/user.User/CreateHelpDocument"
	User_DeleteHelpDocument_FullMethodName            = "/user.User/DeleteHelpDocument"
	User_EditHelpDocument_FullMethodName              = "/user.User/EditHelpDocument"
	User_CreateHelpDocumentTranslation_FullMethodName = "/user.User/CreateHelpDocumentTranslation"
	User_DeleteHelpDocumentTranslation_FullMethodName = "/user.User/DeleteHelpDocumentTranslation"
	User_GetHelpDocumentTranslations_FullMethodName   = "/user.User/GetHelpDocumentTranslations"
	User_EditHelpDocumentTranslation_FullMethodName   = "/user.User/EditHelpDocumentTranslation"
	User_QueryHelpDocument_FullMethodName             = "/user.User/QueryHelpDocument"
	User_CreateSystemNotification_FullMethodName      = "/user.User/CreateSystemNotification"
	User_EditSystemNotification_FullMethodName        = "/user.User/EditSystemNotification"
	User_GetSystemNotifications_FullMethodName        = "/user.User/GetSystemNotifications"
	User_QuerySystemNotification_FullMethodName       = "/user.User/QuerySystemNotification"
	User_CreateNotice_FullMethodName                  = "/user.User/CreateNotice"
	User_RecordNotice_FullMethodName                  = "/user.User/RecordNotice"
	User_QueryRecordNotice_FullMethodName             = "/user.User/QueryRecordNotice"
	User_CreateNotification_FullMethodName            = "/user.User/CreateNotification"
	User_GetUserNotifications_FullMethodName          = "/user.User/GetUserNotifications"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	RegisterCount(ctx context.Context, in *Request, opts ...grpc.CallOption) (*RegisterCountResponse, error)
	OnlineCount(ctx context.Context, in *Request, opts ...grpc.CallOption) (*OnlineCountResponse, error)
	CheckTwitterId(ctx context.Context, in *CheckTwitterIdRequest, opts ...grpc.CallOption) (*CheckTwitterIdResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	CreateInvite(ctx context.Context, in *CreateInviteRequest, opts ...grpc.CallOption) (*CreateInviteResponse, error)
	CheckTodayInvite(ctx context.Context, in *CheckTodayInviteRequest, opts ...grpc.CallOption) (*CheckTodayInviteResponse, error)
	AddUserInfo(ctx context.Context, in *AddUserInfoRequest, opts ...grpc.CallOption) (*AddUserInfoResponse, error)
	QueryUser(ctx context.Context, in *QueryUserRequest, opts ...grpc.CallOption) (*QueryUserResponse, error)
	GetUserList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*UserListResponse, error)
	AddAdmin(ctx context.Context, in *AddAdminRequest, opts ...grpc.CallOption) (*AddAdminResponse, error)
	AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error)
	RemoveAdmin(ctx context.Context, in *RemoveAdminRequest, opts ...grpc.CallOption) (*RemoveAdminResponse, error)
	AddBlackList(ctx context.Context, in *AddBlackListRequest, opts ...grpc.CallOption) (*AddBlackListResponse, error)
	QueryBlackList(ctx context.Context, in *QueryBlackListRequest, opts ...grpc.CallOption) (*QueryBlackListResponse, error)
	RemoveBlackList(ctx context.Context, in *RemoveBlackListRequest, opts ...grpc.CallOption) (*RemoveBlackListResponse, error)
	GetHelpCategories(ctx context.Context, in *GetHelpCategoriesRequest, opts ...grpc.CallOption) (*GetHelpCategoriesResponse, error)
	CreateHelpCategory(ctx context.Context, in *CreateHelpCategoryRequest, opts ...grpc.CallOption) (*CreateHelpCategoryResponse, error)
	DeleteHelpCategory(ctx context.Context, in *DeleteHelpCategoryRequest, opts ...grpc.CallOption) (*DeleteHelpCategoryResponse, error)
	EditHelpCategory(ctx context.Context, in *EditHelpCategoryRequest, opts ...grpc.CallOption) (*EditHelpCategoryResponse, error)
	CreateHelpCategoryTranslation(ctx context.Context, in *CreateHelpCategoryTranslationRequest, opts ...grpc.CallOption) (*CreateHelpCategoryTranslationResponse, error)
	DeleteHelpCategoryTranslation(ctx context.Context, in *DeleteHelpCategoryTranslationRequest, opts ...grpc.CallOption) (*DeleteHelpCategoryTranslationResponse, error)
	GetHelpCategoryTranslations(ctx context.Context, in *GetHelpCategoryTranslationsRequest, opts ...grpc.CallOption) (*GetHelpCategoryTranslationsResponse, error)
	EditHelpCategoryTranslation(ctx context.Context, in *EditHelpCategoryTranslationRequest, opts ...grpc.CallOption) (*EditHelpCategoryTranslationResponse, error)
	QueryHelpCategory(ctx context.Context, in *QueryHelpCategoryRequest, opts ...grpc.CallOption) (*QueryHelpCategoryResponse, error)
	GetHelpDocuments(ctx context.Context, in *GetHelpDocumentsRequest, opts ...grpc.CallOption) (*GetHelpDocumentsResponse, error)
	CreateHelpDocument(ctx context.Context, in *CreateHelpDocumentRequest, opts ...grpc.CallOption) (*CreateHelpDocumentResponse, error)
	DeleteHelpDocument(ctx context.Context, in *DeleteHelpDocumentRequest, opts ...grpc.CallOption) (*DeleteHelpDocumentResponse, error)
	EditHelpDocument(ctx context.Context, in *EditHelpDocumentRequest, opts ...grpc.CallOption) (*EditHelpDocumentResponse, error)
	CreateHelpDocumentTranslation(ctx context.Context, in *CreateHelpDocumentTranslationRequest, opts ...grpc.CallOption) (*CreateHelpDocumentTranslationResponse, error)
	DeleteHelpDocumentTranslation(ctx context.Context, in *DeleteHelpDocumentTranslationRequest, opts ...grpc.CallOption) (*DeleteHelpDocumentTranslationResponse, error)
	GetHelpDocumentTranslations(ctx context.Context, in *GetHelpDocumentTranslationsRequest, opts ...grpc.CallOption) (*GetHelpDocumentTranslationsResponse, error)
	EditHelpDocumentTranslation(ctx context.Context, in *EditHelpDocumentTranslationRequest, opts ...grpc.CallOption) (*EditHelpDocumentTranslationResponse, error)
	QueryHelpDocument(ctx context.Context, in *QueryHelpDocumentRequest, opts ...grpc.CallOption) (*QueryHelpDocumentResponse, error)
	CreateSystemNotification(ctx context.Context, in *CreateSystemNotificationRequest, opts ...grpc.CallOption) (*CreateSystemNotificationResponse, error)
	EditSystemNotification(ctx context.Context, in *EditSystemNotificationRequest, opts ...grpc.CallOption) (*EditSystemNotificationResponse, error)
	GetSystemNotifications(ctx context.Context, in *GetSystemNotificationsRequest, opts ...grpc.CallOption) (*GetSystemNotificationsResponse, error)
	QuerySystemNotification(ctx context.Context, in *QuerySystemNotificationRequest, opts ...grpc.CallOption) (*QuerySystemNotificationResponse, error)
	//recordNotice 通知记录
	CreateNotice(ctx context.Context, in *CreateNoticeRequest, opts ...grpc.CallOption) (*CreateNoticeResponse, error)
	RecordNotice(ctx context.Context, in *RecordNoticeRequest, opts ...grpc.CallOption) (*RecordNoticeResponse, error)
	QueryRecordNotice(ctx context.Context, in *QueryRecordNoticeRequest, opts ...grpc.CallOption) (*QueryRecordNoticeResponse, error)
	// 新增用户消息通知
	CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CreateNotificationResponse, error)
	// 获取用户消息通知
	GetUserNotifications(ctx context.Context, in *GetUserNotificationsRequest, opts ...grpc.CallOption) (*GetUserNotificationsResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, User_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RegisterCount(ctx context.Context, in *Request, opts ...grpc.CallOption) (*RegisterCountResponse, error) {
	out := new(RegisterCountResponse)
	err := c.cc.Invoke(ctx, User_RegisterCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) OnlineCount(ctx context.Context, in *Request, opts ...grpc.CallOption) (*OnlineCountResponse, error) {
	out := new(OnlineCountResponse)
	err := c.cc.Invoke(ctx, User_OnlineCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckTwitterId(ctx context.Context, in *CheckTwitterIdRequest, opts ...grpc.CallOption) (*CheckTwitterIdResponse, error) {
	out := new(CheckTwitterIdResponse)
	err := c.cc.Invoke(ctx, User_CheckTwitterId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, User_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateInvite(ctx context.Context, in *CreateInviteRequest, opts ...grpc.CallOption) (*CreateInviteResponse, error) {
	out := new(CreateInviteResponse)
	err := c.cc.Invoke(ctx, User_CreateInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckTodayInvite(ctx context.Context, in *CheckTodayInviteRequest, opts ...grpc.CallOption) (*CheckTodayInviteResponse, error) {
	out := new(CheckTodayInviteResponse)
	err := c.cc.Invoke(ctx, User_CheckTodayInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUserInfo(ctx context.Context, in *AddUserInfoRequest, opts ...grpc.CallOption) (*AddUserInfoResponse, error) {
	out := new(AddUserInfoResponse)
	err := c.cc.Invoke(ctx, User_AddUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryUser(ctx context.Context, in *QueryUserRequest, opts ...grpc.CallOption) (*QueryUserResponse, error) {
	out := new(QueryUserResponse)
	err := c.cc.Invoke(ctx, User_QueryUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, User_GetUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddAdmin(ctx context.Context, in *AddAdminRequest, opts ...grpc.CallOption) (*AddAdminResponse, error) {
	out := new(AddAdminResponse)
	err := c.cc.Invoke(ctx, User_AddAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error) {
	out := new(AdminLoginResponse)
	err := c.cc.Invoke(ctx, User_AdminLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RemoveAdmin(ctx context.Context, in *RemoveAdminRequest, opts ...grpc.CallOption) (*RemoveAdminResponse, error) {
	out := new(RemoveAdminResponse)
	err := c.cc.Invoke(ctx, User_RemoveAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddBlackList(ctx context.Context, in *AddBlackListRequest, opts ...grpc.CallOption) (*AddBlackListResponse, error) {
	out := new(AddBlackListResponse)
	err := c.cc.Invoke(ctx, User_AddBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryBlackList(ctx context.Context, in *QueryBlackListRequest, opts ...grpc.CallOption) (*QueryBlackListResponse, error) {
	out := new(QueryBlackListResponse)
	err := c.cc.Invoke(ctx, User_QueryBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RemoveBlackList(ctx context.Context, in *RemoveBlackListRequest, opts ...grpc.CallOption) (*RemoveBlackListResponse, error) {
	out := new(RemoveBlackListResponse)
	err := c.cc.Invoke(ctx, User_RemoveBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetHelpCategories(ctx context.Context, in *GetHelpCategoriesRequest, opts ...grpc.CallOption) (*GetHelpCategoriesResponse, error) {
	out := new(GetHelpCategoriesResponse)
	err := c.cc.Invoke(ctx, User_GetHelpCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateHelpCategory(ctx context.Context, in *CreateHelpCategoryRequest, opts ...grpc.CallOption) (*CreateHelpCategoryResponse, error) {
	out := new(CreateHelpCategoryResponse)
	err := c.cc.Invoke(ctx, User_CreateHelpCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteHelpCategory(ctx context.Context, in *DeleteHelpCategoryRequest, opts ...grpc.CallOption) (*DeleteHelpCategoryResponse, error) {
	out := new(DeleteHelpCategoryResponse)
	err := c.cc.Invoke(ctx, User_DeleteHelpCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EditHelpCategory(ctx context.Context, in *EditHelpCategoryRequest, opts ...grpc.CallOption) (*EditHelpCategoryResponse, error) {
	out := new(EditHelpCategoryResponse)
	err := c.cc.Invoke(ctx, User_EditHelpCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateHelpCategoryTranslation(ctx context.Context, in *CreateHelpCategoryTranslationRequest, opts ...grpc.CallOption) (*CreateHelpCategoryTranslationResponse, error) {
	out := new(CreateHelpCategoryTranslationResponse)
	err := c.cc.Invoke(ctx, User_CreateHelpCategoryTranslation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteHelpCategoryTranslation(ctx context.Context, in *DeleteHelpCategoryTranslationRequest, opts ...grpc.CallOption) (*DeleteHelpCategoryTranslationResponse, error) {
	out := new(DeleteHelpCategoryTranslationResponse)
	err := c.cc.Invoke(ctx, User_DeleteHelpCategoryTranslation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetHelpCategoryTranslations(ctx context.Context, in *GetHelpCategoryTranslationsRequest, opts ...grpc.CallOption) (*GetHelpCategoryTranslationsResponse, error) {
	out := new(GetHelpCategoryTranslationsResponse)
	err := c.cc.Invoke(ctx, User_GetHelpCategoryTranslations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EditHelpCategoryTranslation(ctx context.Context, in *EditHelpCategoryTranslationRequest, opts ...grpc.CallOption) (*EditHelpCategoryTranslationResponse, error) {
	out := new(EditHelpCategoryTranslationResponse)
	err := c.cc.Invoke(ctx, User_EditHelpCategoryTranslation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryHelpCategory(ctx context.Context, in *QueryHelpCategoryRequest, opts ...grpc.CallOption) (*QueryHelpCategoryResponse, error) {
	out := new(QueryHelpCategoryResponse)
	err := c.cc.Invoke(ctx, User_QueryHelpCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetHelpDocuments(ctx context.Context, in *GetHelpDocumentsRequest, opts ...grpc.CallOption) (*GetHelpDocumentsResponse, error) {
	out := new(GetHelpDocumentsResponse)
	err := c.cc.Invoke(ctx, User_GetHelpDocuments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateHelpDocument(ctx context.Context, in *CreateHelpDocumentRequest, opts ...grpc.CallOption) (*CreateHelpDocumentResponse, error) {
	out := new(CreateHelpDocumentResponse)
	err := c.cc.Invoke(ctx, User_CreateHelpDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteHelpDocument(ctx context.Context, in *DeleteHelpDocumentRequest, opts ...grpc.CallOption) (*DeleteHelpDocumentResponse, error) {
	out := new(DeleteHelpDocumentResponse)
	err := c.cc.Invoke(ctx, User_DeleteHelpDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EditHelpDocument(ctx context.Context, in *EditHelpDocumentRequest, opts ...grpc.CallOption) (*EditHelpDocumentResponse, error) {
	out := new(EditHelpDocumentResponse)
	err := c.cc.Invoke(ctx, User_EditHelpDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateHelpDocumentTranslation(ctx context.Context, in *CreateHelpDocumentTranslationRequest, opts ...grpc.CallOption) (*CreateHelpDocumentTranslationResponse, error) {
	out := new(CreateHelpDocumentTranslationResponse)
	err := c.cc.Invoke(ctx, User_CreateHelpDocumentTranslation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteHelpDocumentTranslation(ctx context.Context, in *DeleteHelpDocumentTranslationRequest, opts ...grpc.CallOption) (*DeleteHelpDocumentTranslationResponse, error) {
	out := new(DeleteHelpDocumentTranslationResponse)
	err := c.cc.Invoke(ctx, User_DeleteHelpDocumentTranslation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetHelpDocumentTranslations(ctx context.Context, in *GetHelpDocumentTranslationsRequest, opts ...grpc.CallOption) (*GetHelpDocumentTranslationsResponse, error) {
	out := new(GetHelpDocumentTranslationsResponse)
	err := c.cc.Invoke(ctx, User_GetHelpDocumentTranslations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EditHelpDocumentTranslation(ctx context.Context, in *EditHelpDocumentTranslationRequest, opts ...grpc.CallOption) (*EditHelpDocumentTranslationResponse, error) {
	out := new(EditHelpDocumentTranslationResponse)
	err := c.cc.Invoke(ctx, User_EditHelpDocumentTranslation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryHelpDocument(ctx context.Context, in *QueryHelpDocumentRequest, opts ...grpc.CallOption) (*QueryHelpDocumentResponse, error) {
	out := new(QueryHelpDocumentResponse)
	err := c.cc.Invoke(ctx, User_QueryHelpDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateSystemNotification(ctx context.Context, in *CreateSystemNotificationRequest, opts ...grpc.CallOption) (*CreateSystemNotificationResponse, error) {
	out := new(CreateSystemNotificationResponse)
	err := c.cc.Invoke(ctx, User_CreateSystemNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EditSystemNotification(ctx context.Context, in *EditSystemNotificationRequest, opts ...grpc.CallOption) (*EditSystemNotificationResponse, error) {
	out := new(EditSystemNotificationResponse)
	err := c.cc.Invoke(ctx, User_EditSystemNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetSystemNotifications(ctx context.Context, in *GetSystemNotificationsRequest, opts ...grpc.CallOption) (*GetSystemNotificationsResponse, error) {
	out := new(GetSystemNotificationsResponse)
	err := c.cc.Invoke(ctx, User_GetSystemNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QuerySystemNotification(ctx context.Context, in *QuerySystemNotificationRequest, opts ...grpc.CallOption) (*QuerySystemNotificationResponse, error) {
	out := new(QuerySystemNotificationResponse)
	err := c.cc.Invoke(ctx, User_QuerySystemNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateNotice(ctx context.Context, in *CreateNoticeRequest, opts ...grpc.CallOption) (*CreateNoticeResponse, error) {
	out := new(CreateNoticeResponse)
	err := c.cc.Invoke(ctx, User_CreateNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RecordNotice(ctx context.Context, in *RecordNoticeRequest, opts ...grpc.CallOption) (*RecordNoticeResponse, error) {
	out := new(RecordNoticeResponse)
	err := c.cc.Invoke(ctx, User_RecordNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryRecordNotice(ctx context.Context, in *QueryRecordNoticeRequest, opts ...grpc.CallOption) (*QueryRecordNoticeResponse, error) {
	out := new(QueryRecordNoticeResponse)
	err := c.cc.Invoke(ctx, User_QueryRecordNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CreateNotificationResponse, error) {
	out := new(CreateNotificationResponse)
	err := c.cc.Invoke(ctx, User_CreateNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserNotifications(ctx context.Context, in *GetUserNotificationsRequest, opts ...grpc.CallOption) (*GetUserNotificationsResponse, error) {
	out := new(GetUserNotificationsResponse)
	err := c.cc.Invoke(ctx, User_GetUserNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	Ping(context.Context, *Request) (*Response, error)
	RegisterCount(context.Context, *Request) (*RegisterCountResponse, error)
	OnlineCount(context.Context, *Request) (*OnlineCountResponse, error)
	CheckTwitterId(context.Context, *CheckTwitterIdRequest) (*CheckTwitterIdResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	CreateInvite(context.Context, *CreateInviteRequest) (*CreateInviteResponse, error)
	CheckTodayInvite(context.Context, *CheckTodayInviteRequest) (*CheckTodayInviteResponse, error)
	AddUserInfo(context.Context, *AddUserInfoRequest) (*AddUserInfoResponse, error)
	QueryUser(context.Context, *QueryUserRequest) (*QueryUserResponse, error)
	GetUserList(context.Context, *Request) (*UserListResponse, error)
	AddAdmin(context.Context, *AddAdminRequest) (*AddAdminResponse, error)
	AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error)
	RemoveAdmin(context.Context, *RemoveAdminRequest) (*RemoveAdminResponse, error)
	AddBlackList(context.Context, *AddBlackListRequest) (*AddBlackListResponse, error)
	QueryBlackList(context.Context, *QueryBlackListRequest) (*QueryBlackListResponse, error)
	RemoveBlackList(context.Context, *RemoveBlackListRequest) (*RemoveBlackListResponse, error)
	GetHelpCategories(context.Context, *GetHelpCategoriesRequest) (*GetHelpCategoriesResponse, error)
	CreateHelpCategory(context.Context, *CreateHelpCategoryRequest) (*CreateHelpCategoryResponse, error)
	DeleteHelpCategory(context.Context, *DeleteHelpCategoryRequest) (*DeleteHelpCategoryResponse, error)
	EditHelpCategory(context.Context, *EditHelpCategoryRequest) (*EditHelpCategoryResponse, error)
	CreateHelpCategoryTranslation(context.Context, *CreateHelpCategoryTranslationRequest) (*CreateHelpCategoryTranslationResponse, error)
	DeleteHelpCategoryTranslation(context.Context, *DeleteHelpCategoryTranslationRequest) (*DeleteHelpCategoryTranslationResponse, error)
	GetHelpCategoryTranslations(context.Context, *GetHelpCategoryTranslationsRequest) (*GetHelpCategoryTranslationsResponse, error)
	EditHelpCategoryTranslation(context.Context, *EditHelpCategoryTranslationRequest) (*EditHelpCategoryTranslationResponse, error)
	QueryHelpCategory(context.Context, *QueryHelpCategoryRequest) (*QueryHelpCategoryResponse, error)
	GetHelpDocuments(context.Context, *GetHelpDocumentsRequest) (*GetHelpDocumentsResponse, error)
	CreateHelpDocument(context.Context, *CreateHelpDocumentRequest) (*CreateHelpDocumentResponse, error)
	DeleteHelpDocument(context.Context, *DeleteHelpDocumentRequest) (*DeleteHelpDocumentResponse, error)
	EditHelpDocument(context.Context, *EditHelpDocumentRequest) (*EditHelpDocumentResponse, error)
	CreateHelpDocumentTranslation(context.Context, *CreateHelpDocumentTranslationRequest) (*CreateHelpDocumentTranslationResponse, error)
	DeleteHelpDocumentTranslation(context.Context, *DeleteHelpDocumentTranslationRequest) (*DeleteHelpDocumentTranslationResponse, error)
	GetHelpDocumentTranslations(context.Context, *GetHelpDocumentTranslationsRequest) (*GetHelpDocumentTranslationsResponse, error)
	EditHelpDocumentTranslation(context.Context, *EditHelpDocumentTranslationRequest) (*EditHelpDocumentTranslationResponse, error)
	QueryHelpDocument(context.Context, *QueryHelpDocumentRequest) (*QueryHelpDocumentResponse, error)
	CreateSystemNotification(context.Context, *CreateSystemNotificationRequest) (*CreateSystemNotificationResponse, error)
	EditSystemNotification(context.Context, *EditSystemNotificationRequest) (*EditSystemNotificationResponse, error)
	GetSystemNotifications(context.Context, *GetSystemNotificationsRequest) (*GetSystemNotificationsResponse, error)
	QuerySystemNotification(context.Context, *QuerySystemNotificationRequest) (*QuerySystemNotificationResponse, error)
	//recordNotice 通知记录
	CreateNotice(context.Context, *CreateNoticeRequest) (*CreateNoticeResponse, error)
	RecordNotice(context.Context, *RecordNoticeRequest) (*RecordNoticeResponse, error)
	QueryRecordNotice(context.Context, *QueryRecordNoticeRequest) (*QueryRecordNoticeResponse, error)
	// 新增用户消息通知
	CreateNotification(context.Context, *CreateNotificationRequest) (*CreateNotificationResponse, error)
	// 获取用户消息通知
	GetUserNotifications(context.Context, *GetUserNotificationsRequest) (*GetUserNotificationsResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUserServer) RegisterCount(context.Context, *Request) (*RegisterCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCount not implemented")
}
func (UnimplementedUserServer) OnlineCount(context.Context, *Request) (*OnlineCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineCount not implemented")
}
func (UnimplementedUserServer) CheckTwitterId(context.Context, *CheckTwitterIdRequest) (*CheckTwitterIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTwitterId not implemented")
}
func (UnimplementedUserServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) CreateInvite(context.Context, *CreateInviteRequest) (*CreateInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvite not implemented")
}
func (UnimplementedUserServer) CheckTodayInvite(context.Context, *CheckTodayInviteRequest) (*CheckTodayInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTodayInvite not implemented")
}
func (UnimplementedUserServer) AddUserInfo(context.Context, *AddUserInfoRequest) (*AddUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserInfo not implemented")
}
func (UnimplementedUserServer) QueryUser(context.Context, *QueryUserRequest) (*QueryUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUser not implemented")
}
func (UnimplementedUserServer) GetUserList(context.Context, *Request) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedUserServer) AddAdmin(context.Context, *AddAdminRequest) (*AddAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdmin not implemented")
}
func (UnimplementedUserServer) AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedUserServer) RemoveAdmin(context.Context, *RemoveAdminRequest) (*RemoveAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAdmin not implemented")
}
func (UnimplementedUserServer) AddBlackList(context.Context, *AddBlackListRequest) (*AddBlackListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlackList not implemented")
}
func (UnimplementedUserServer) QueryBlackList(context.Context, *QueryBlackListRequest) (*QueryBlackListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlackList not implemented")
}
func (UnimplementedUserServer) RemoveBlackList(context.Context, *RemoveBlackListRequest) (*RemoveBlackListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlackList not implemented")
}
func (UnimplementedUserServer) GetHelpCategories(context.Context, *GetHelpCategoriesRequest) (*GetHelpCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelpCategories not implemented")
}
func (UnimplementedUserServer) CreateHelpCategory(context.Context, *CreateHelpCategoryRequest) (*CreateHelpCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHelpCategory not implemented")
}
func (UnimplementedUserServer) DeleteHelpCategory(context.Context, *DeleteHelpCategoryRequest) (*DeleteHelpCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHelpCategory not implemented")
}
func (UnimplementedUserServer) EditHelpCategory(context.Context, *EditHelpCategoryRequest) (*EditHelpCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditHelpCategory not implemented")
}
func (UnimplementedUserServer) CreateHelpCategoryTranslation(context.Context, *CreateHelpCategoryTranslationRequest) (*CreateHelpCategoryTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHelpCategoryTranslation not implemented")
}
func (UnimplementedUserServer) DeleteHelpCategoryTranslation(context.Context, *DeleteHelpCategoryTranslationRequest) (*DeleteHelpCategoryTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHelpCategoryTranslation not implemented")
}
func (UnimplementedUserServer) GetHelpCategoryTranslations(context.Context, *GetHelpCategoryTranslationsRequest) (*GetHelpCategoryTranslationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelpCategoryTranslations not implemented")
}
func (UnimplementedUserServer) EditHelpCategoryTranslation(context.Context, *EditHelpCategoryTranslationRequest) (*EditHelpCategoryTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditHelpCategoryTranslation not implemented")
}
func (UnimplementedUserServer) QueryHelpCategory(context.Context, *QueryHelpCategoryRequest) (*QueryHelpCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHelpCategory not implemented")
}
func (UnimplementedUserServer) GetHelpDocuments(context.Context, *GetHelpDocumentsRequest) (*GetHelpDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelpDocuments not implemented")
}
func (UnimplementedUserServer) CreateHelpDocument(context.Context, *CreateHelpDocumentRequest) (*CreateHelpDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHelpDocument not implemented")
}
func (UnimplementedUserServer) DeleteHelpDocument(context.Context, *DeleteHelpDocumentRequest) (*DeleteHelpDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHelpDocument not implemented")
}
func (UnimplementedUserServer) EditHelpDocument(context.Context, *EditHelpDocumentRequest) (*EditHelpDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditHelpDocument not implemented")
}
func (UnimplementedUserServer) CreateHelpDocumentTranslation(context.Context, *CreateHelpDocumentTranslationRequest) (*CreateHelpDocumentTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHelpDocumentTranslation not implemented")
}
func (UnimplementedUserServer) DeleteHelpDocumentTranslation(context.Context, *DeleteHelpDocumentTranslationRequest) (*DeleteHelpDocumentTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHelpDocumentTranslation not implemented")
}
func (UnimplementedUserServer) GetHelpDocumentTranslations(context.Context, *GetHelpDocumentTranslationsRequest) (*GetHelpDocumentTranslationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelpDocumentTranslations not implemented")
}
func (UnimplementedUserServer) EditHelpDocumentTranslation(context.Context, *EditHelpDocumentTranslationRequest) (*EditHelpDocumentTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditHelpDocumentTranslation not implemented")
}
func (UnimplementedUserServer) QueryHelpDocument(context.Context, *QueryHelpDocumentRequest) (*QueryHelpDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHelpDocument not implemented")
}
func (UnimplementedUserServer) CreateSystemNotification(context.Context, *CreateSystemNotificationRequest) (*CreateSystemNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystemNotification not implemented")
}
func (UnimplementedUserServer) EditSystemNotification(context.Context, *EditSystemNotificationRequest) (*EditSystemNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSystemNotification not implemented")
}
func (UnimplementedUserServer) GetSystemNotifications(context.Context, *GetSystemNotificationsRequest) (*GetSystemNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemNotifications not implemented")
}
func (UnimplementedUserServer) QuerySystemNotification(context.Context, *QuerySystemNotificationRequest) (*QuerySystemNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySystemNotification not implemented")
}
func (UnimplementedUserServer) CreateNotice(context.Context, *CreateNoticeRequest) (*CreateNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotice not implemented")
}
func (UnimplementedUserServer) RecordNotice(context.Context, *RecordNoticeRequest) (*RecordNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordNotice not implemented")
}
func (UnimplementedUserServer) QueryRecordNotice(context.Context, *QueryRecordNoticeRequest) (*QueryRecordNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRecordNotice not implemented")
}
func (UnimplementedUserServer) CreateNotification(context.Context, *CreateNotificationRequest) (*CreateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedUserServer) GetUserNotifications(context.Context, *GetUserNotificationsRequest) (*GetUserNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotifications not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RegisterCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RegisterCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RegisterCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RegisterCount(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_OnlineCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).OnlineCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_OnlineCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).OnlineCount(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckTwitterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTwitterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckTwitterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CheckTwitterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckTwitterId(ctx, req.(*CheckTwitterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateInvite(ctx, req.(*CreateInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckTodayInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTodayInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckTodayInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CheckTodayInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckTodayInvite(ctx, req.(*CheckTodayInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUserInfo(ctx, req.(*AddUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_QueryUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryUser(ctx, req.(*QueryUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddAdmin(ctx, req.(*AddAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminLogin(ctx, req.(*AdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RemoveAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RemoveAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RemoveAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RemoveAdmin(ctx, req.(*RemoveAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddBlackList(ctx, req.(*AddBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_QueryBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryBlackList(ctx, req.(*QueryBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RemoveBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RemoveBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RemoveBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RemoveBlackList(ctx, req.(*RemoveBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetHelpCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHelpCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetHelpCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetHelpCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetHelpCategories(ctx, req.(*GetHelpCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateHelpCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHelpCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateHelpCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateHelpCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateHelpCategory(ctx, req.(*CreateHelpCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteHelpCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelpCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteHelpCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteHelpCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteHelpCategory(ctx, req.(*DeleteHelpCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EditHelpCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditHelpCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EditHelpCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EditHelpCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EditHelpCategory(ctx, req.(*EditHelpCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateHelpCategoryTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHelpCategoryTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateHelpCategoryTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateHelpCategoryTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateHelpCategoryTranslation(ctx, req.(*CreateHelpCategoryTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteHelpCategoryTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelpCategoryTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteHelpCategoryTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteHelpCategoryTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteHelpCategoryTranslation(ctx, req.(*DeleteHelpCategoryTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetHelpCategoryTranslations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHelpCategoryTranslationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetHelpCategoryTranslations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetHelpCategoryTranslations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetHelpCategoryTranslations(ctx, req.(*GetHelpCategoryTranslationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EditHelpCategoryTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditHelpCategoryTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EditHelpCategoryTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EditHelpCategoryTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EditHelpCategoryTranslation(ctx, req.(*EditHelpCategoryTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryHelpCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHelpCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryHelpCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_QueryHelpCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryHelpCategory(ctx, req.(*QueryHelpCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetHelpDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHelpDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetHelpDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetHelpDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetHelpDocuments(ctx, req.(*GetHelpDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateHelpDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHelpDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateHelpDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateHelpDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateHelpDocument(ctx, req.(*CreateHelpDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteHelpDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelpDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteHelpDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteHelpDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteHelpDocument(ctx, req.(*DeleteHelpDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EditHelpDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditHelpDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EditHelpDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EditHelpDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EditHelpDocument(ctx, req.(*EditHelpDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateHelpDocumentTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHelpDocumentTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateHelpDocumentTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateHelpDocumentTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateHelpDocumentTranslation(ctx, req.(*CreateHelpDocumentTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteHelpDocumentTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelpDocumentTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteHelpDocumentTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteHelpDocumentTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteHelpDocumentTranslation(ctx, req.(*DeleteHelpDocumentTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetHelpDocumentTranslations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHelpDocumentTranslationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetHelpDocumentTranslations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetHelpDocumentTranslations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetHelpDocumentTranslations(ctx, req.(*GetHelpDocumentTranslationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EditHelpDocumentTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditHelpDocumentTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EditHelpDocumentTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EditHelpDocumentTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EditHelpDocumentTranslation(ctx, req.(*EditHelpDocumentTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryHelpDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHelpDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryHelpDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_QueryHelpDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryHelpDocument(ctx, req.(*QueryHelpDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateSystemNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateSystemNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateSystemNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateSystemNotification(ctx, req.(*CreateSystemNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EditSystemNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditSystemNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EditSystemNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EditSystemNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EditSystemNotification(ctx, req.(*EditSystemNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetSystemNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetSystemNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetSystemNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetSystemNotifications(ctx, req.(*GetSystemNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QuerySystemNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySystemNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QuerySystemNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_QuerySystemNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QuerySystemNotification(ctx, req.(*QuerySystemNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateNotice(ctx, req.(*CreateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RecordNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RecordNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RecordNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RecordNotice(ctx, req.(*RecordNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryRecordNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecordNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryRecordNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_QueryRecordNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryRecordNotice(ctx, req.(*QueryRecordNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserNotifications(ctx, req.(*GetUserNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _User_Ping_Handler,
		},
		{
			MethodName: "RegisterCount",
			Handler:    _User_RegisterCount_Handler,
		},
		{
			MethodName: "OnlineCount",
			Handler:    _User_OnlineCount_Handler,
		},
		{
			MethodName: "CheckTwitterId",
			Handler:    _User_CheckTwitterId_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "CreateInvite",
			Handler:    _User_CreateInvite_Handler,
		},
		{
			MethodName: "CheckTodayInvite",
			Handler:    _User_CheckTodayInvite_Handler,
		},
		{
			MethodName: "AddUserInfo",
			Handler:    _User_AddUserInfo_Handler,
		},
		{
			MethodName: "QueryUser",
			Handler:    _User_QueryUser_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _User_GetUserList_Handler,
		},
		{
			MethodName: "AddAdmin",
			Handler:    _User_AddAdmin_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _User_AdminLogin_Handler,
		},
		{
			MethodName: "RemoveAdmin",
			Handler:    _User_RemoveAdmin_Handler,
		},
		{
			MethodName: "AddBlackList",
			Handler:    _User_AddBlackList_Handler,
		},
		{
			MethodName: "QueryBlackList",
			Handler:    _User_QueryBlackList_Handler,
		},
		{
			MethodName: "RemoveBlackList",
			Handler:    _User_RemoveBlackList_Handler,
		},
		{
			MethodName: "GetHelpCategories",
			Handler:    _User_GetHelpCategories_Handler,
		},
		{
			MethodName: "CreateHelpCategory",
			Handler:    _User_CreateHelpCategory_Handler,
		},
		{
			MethodName: "DeleteHelpCategory",
			Handler:    _User_DeleteHelpCategory_Handler,
		},
		{
			MethodName: "EditHelpCategory",
			Handler:    _User_EditHelpCategory_Handler,
		},
		{
			MethodName: "CreateHelpCategoryTranslation",
			Handler:    _User_CreateHelpCategoryTranslation_Handler,
		},
		{
			MethodName: "DeleteHelpCategoryTranslation",
			Handler:    _User_DeleteHelpCategoryTranslation_Handler,
		},
		{
			MethodName: "GetHelpCategoryTranslations",
			Handler:    _User_GetHelpCategoryTranslations_Handler,
		},
		{
			MethodName: "EditHelpCategoryTranslation",
			Handler:    _User_EditHelpCategoryTranslation_Handler,
		},
		{
			MethodName: "QueryHelpCategory",
			Handler:    _User_QueryHelpCategory_Handler,
		},
		{
			MethodName: "GetHelpDocuments",
			Handler:    _User_GetHelpDocuments_Handler,
		},
		{
			MethodName: "CreateHelpDocument",
			Handler:    _User_CreateHelpDocument_Handler,
		},
		{
			MethodName: "DeleteHelpDocument",
			Handler:    _User_DeleteHelpDocument_Handler,
		},
		{
			MethodName: "EditHelpDocument",
			Handler:    _User_EditHelpDocument_Handler,
		},
		{
			MethodName: "CreateHelpDocumentTranslation",
			Handler:    _User_CreateHelpDocumentTranslation_Handler,
		},
		{
			MethodName: "DeleteHelpDocumentTranslation",
			Handler:    _User_DeleteHelpDocumentTranslation_Handler,
		},
		{
			MethodName: "GetHelpDocumentTranslations",
			Handler:    _User_GetHelpDocumentTranslations_Handler,
		},
		{
			MethodName: "EditHelpDocumentTranslation",
			Handler:    _User_EditHelpDocumentTranslation_Handler,
		},
		{
			MethodName: "QueryHelpDocument",
			Handler:    _User_QueryHelpDocument_Handler,
		},
		{
			MethodName: "CreateSystemNotification",
			Handler:    _User_CreateSystemNotification_Handler,
		},
		{
			MethodName: "EditSystemNotification",
			Handler:    _User_EditSystemNotification_Handler,
		},
		{
			MethodName: "GetSystemNotifications",
			Handler:    _User_GetSystemNotifications_Handler,
		},
		{
			MethodName: "QuerySystemNotification",
			Handler:    _User_QuerySystemNotification_Handler,
		},
		{
			MethodName: "CreateNotice",
			Handler:    _User_CreateNotice_Handler,
		},
		{
			MethodName: "RecordNotice",
			Handler:    _User_RecordNotice_Handler,
		},
		{
			MethodName: "QueryRecordNotice",
			Handler:    _User_QueryRecordNotice_Handler,
		},
		{
			MethodName: "CreateNotification",
			Handler:    _User_CreateNotification_Handler,
		},
		{
			MethodName: "GetUserNotifications",
			Handler:    _User_GetUserNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
