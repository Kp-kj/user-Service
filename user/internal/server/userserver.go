// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"user/internal/logic"
	"user/internal/svc"
	"user/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) Ping(ctx context.Context, in *user.Request) (*user.Response, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

func (s *UserServer) CheckTwitterId(ctx context.Context, in *user.CheckTwitterIdRequest) (*user.CheckTwitterIdResponse, error) {
	l := logic.NewCheckTwitterIdLogic(ctx, s.svcCtx)
	return l.CheckTwitterId(in)
}

func (s *UserServer) CreateUser(ctx context.Context, in *user.CreateUserRequest) (*user.CreateUserResponse, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *UserServer) CreateInvite(ctx context.Context, in *user.CreateInviteRequest) (*user.CreateInviteResponse, error) {
	l := logic.NewCreateInviteLogic(ctx, s.svcCtx)
	return l.CreateInvite(in)
}

func (s *UserServer) CheckTodayInvite(ctx context.Context, in *user.CheckTodayInviteRequest) (*user.CheckTodayInviteResponse, error) {
	l := logic.NewCheckTodayInviteLogic(ctx, s.svcCtx)
	return l.CheckTodayInvite(in)
}

func (s *UserServer) AddUserInfo(ctx context.Context, in *user.AddUserInfoRequest) (*user.AddUserInfoResponse, error) {
	l := logic.NewAddUserInfoLogic(ctx, s.svcCtx)
	return l.AddUserInfo(in)
}

func (s *UserServer) QueryUser(ctx context.Context, in *user.QueryUserRequest) (*user.QueryUserResponse, error) {
	l := logic.NewQueryUserLogic(ctx, s.svcCtx)
	return l.QueryUser(in)
}

func (s *UserServer) AddAdmin(ctx context.Context, in *user.AddAdminRequest) (*user.AddAdminResponse, error) {
	l := logic.NewAddAdminLogic(ctx, s.svcCtx)
	return l.AddAdmin(in)
}

func (s *UserServer) AdminLogin(ctx context.Context, in *user.AdminLoginRequest) (*user.AdminLoginResponse, error) {
	l := logic.NewAdminLoginLogic(ctx, s.svcCtx)
	return l.AdminLogin(in)
}

func (s *UserServer) RemoveAdmin(ctx context.Context, in *user.RemoveAdminRequest) (*user.RemoveAdminResponse, error) {
	l := logic.NewRemoveAdminLogic(ctx, s.svcCtx)
	return l.RemoveAdmin(in)
}

func (s *UserServer) AddBlackList(ctx context.Context, in *user.AddBlackListRequest) (*user.AddBlackListResponse, error) {
	l := logic.NewAddBlackListLogic(ctx, s.svcCtx)
	return l.AddBlackList(in)
}

func (s *UserServer) QueryBlackList(ctx context.Context, in *user.QueryBlackListRequest) (*user.QueryBlackListResponse, error) {
	l := logic.NewQueryBlackListLogic(ctx, s.svcCtx)
	return l.QueryBlackList(in)
}

func (s *UserServer) RemoveBlackList(ctx context.Context, in *user.RemoveBlackListRequest) (*user.RemoveBlackListResponse, error) {
	l := logic.NewRemoveBlackListLogic(ctx, s.svcCtx)
	return l.RemoveBlackList(in)
}

func (s *UserServer) GetHelpCategories(ctx context.Context, in *user.GetHelpCategoriesRequest) (*user.GetHelpCategoriesResponse, error) {
	l := logic.NewGetHelpCategoriesLogic(ctx, s.svcCtx)
	return l.GetHelpCategories(in)
}

func (s *UserServer) CreateHelpCategory(ctx context.Context, in *user.CreateHelpCategoryRequest) (*user.CreateHelpCategoryResponse, error) {
	l := logic.NewCreateHelpCategoryLogic(ctx, s.svcCtx)
	return l.CreateHelpCategory(in)
}

func (s *UserServer) DeleteHelpCategory(ctx context.Context, in *user.DeleteHelpCategoryRequest) (*user.DeleteHelpCategoryResponse, error) {
	l := logic.NewDeleteHelpCategoryLogic(ctx, s.svcCtx)
	return l.DeleteHelpCategory(in)
}

func (s *UserServer) EditHelpCategory(ctx context.Context, in *user.EditHelpCategoryRequest) (*user.EditHelpCategoryResponse, error) {
	l := logic.NewEditHelpCategoryLogic(ctx, s.svcCtx)
	return l.EditHelpCategory(in)
}

func (s *UserServer) CreateHelpCategoryTranslation(ctx context.Context, in *user.CreateHelpCategoryTranslationRequest) (*user.CreateHelpCategoryTranslationResponse, error) {
	l := logic.NewCreateHelpCategoryTranslationLogic(ctx, s.svcCtx)
	return l.CreateHelpCategoryTranslation(in)
}

func (s *UserServer) DeleteHelpCategoryTranslation(ctx context.Context, in *user.DeleteHelpCategoryTranslationRequest) (*user.DeleteHelpCategoryTranslationResponse, error) {
	l := logic.NewDeleteHelpCategoryTranslationLogic(ctx, s.svcCtx)
	return l.DeleteHelpCategoryTranslation(in)
}

func (s *UserServer) GetHelpCategoryTranslations(ctx context.Context, in *user.GetHelpCategoryTranslationsRequest) (*user.GetHelpCategoryTranslationsResponse, error) {
	l := logic.NewGetHelpCategoryTranslationsLogic(ctx, s.svcCtx)
	return l.GetHelpCategoryTranslations(in)
}
