// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userNoticeFieldNames          = builder.RawFieldNames(&UserNotice{})
	userNoticeRows                = strings.Join(userNoticeFieldNames, ",")
	userNoticeRowsExpectAutoSet   = strings.Join(stringx.Remove(userNoticeFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userNoticeRowsWithPlaceHolder = strings.Join(stringx.Remove(userNoticeFieldNames, "`userNotice_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userNoticeModel interface {
		Insert(ctx context.Context, data *UserNotice) (sql.Result, error)
		FindOne(ctx context.Context, userNoticeId int64) (*UserNotice, error)
		Update(ctx context.Context, data *UserNotice) error
		Delete(ctx context.Context, userNoticeId int64) error
	}

	defaultUserNoticeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserNotice struct {
		UserNoticeId  int64        `db:"userNotice_id"`
		CreatedAt     time.Time    `db:"created_at"`
		UpdatedAt     sql.NullTime `db:"updated_at"`
		DeletedAt     sql.NullTime `db:"deleted_at"`
		UserId        int64        `db:"user_id"`
		NoticeContent string       `db:"notice_content"`
		NoticeStatus  int64        `db:"notice_status"`
	}
)

func newUserNoticeModel(conn sqlx.SqlConn) *defaultUserNoticeModel {
	return &defaultUserNoticeModel{
		conn:  conn,
		table: "`userNotice`",
	}
}

func (m *defaultUserNoticeModel) Delete(ctx context.Context, userNoticeId int64) error {
	query := fmt.Sprintf("delete from %s where `userNotice_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userNoticeId)
	return err
}

func (m *defaultUserNoticeModel) FindOne(ctx context.Context, userNoticeId int64) (*UserNotice, error) {
	query := fmt.Sprintf("select %s from %s where `userNotice_id` = ? limit 1", userNoticeRows, m.table)
	var resp UserNotice
	err := m.conn.QueryRowCtx(ctx, &resp, query, userNoticeId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserNoticeModel) Insert(ctx context.Context, data *UserNotice) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userNoticeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserNoticeId, data.DeletedAt, data.UserId, data.NoticeContent, data.NoticeStatus)
	return ret, err
}

func (m *defaultUserNoticeModel) Update(ctx context.Context, data *UserNotice) error {
	query := fmt.Sprintf("update %s set %s where `userNotice_id` = ?", m.table, userNoticeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.UserId, data.NoticeContent, data.NoticeStatus, data.UserNoticeId)
	return err
}

func (m *defaultUserNoticeModel) tableName() string {
	return m.table
}
