// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	helpdocumentFieldNames          = builder.RawFieldNames(&Helpdocument{})
	helpdocumentRows                = strings.Join(helpdocumentFieldNames, ",")
	helpdocumentRowsExpectAutoSet   = strings.Join(stringx.Remove(helpdocumentFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	helpdocumentRowsWithPlaceHolder = strings.Join(stringx.Remove(helpdocumentFieldNames, "`helpDocument_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	helpdocumentModel interface {
		Insert(ctx context.Context, data *Helpdocument) (sql.Result, error)
		FindOne(ctx context.Context, helpDocumentId int64) (*Helpdocument, error)
		Update(ctx context.Context, data *Helpdocument) error
		Delete(ctx context.Context, helpDocumentId int64) error
		FindAll(ctx context.Context) ([]*Helpdocument, error)
		Edithelpdocument(ctx context.Context, helpDocumentId int64, documentStatus int64) error

	}

	defaultHelpdocumentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Helpdocument struct {
		HelpDocumentId int64        `db:"helpDocument_id"`
		CreatedAt      time.Time    `db:"created_at"`
		UpdatedAt      sql.NullTime `db:"updated_at"`
		DeletedAt      sql.NullTime `db:"deleted_at"`
		HelpCategoryId int64        `db:"helpCategory_id"`
		DocumentStatus int64        `db:"document_status"`
	}
)



func newHelpdocumentModel(conn sqlx.SqlConn) *defaultHelpdocumentModel {
	return &defaultHelpdocumentModel{
		conn:  conn,
		table: "`helpdocument`",
	}
}





func (m *defaultHelpdocumentModel) Delete(ctx context.Context, helpDocumentId int64) error {
	query := fmt.Sprintf("delete from %s where `helpDocument_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, helpDocumentId)
	return err
}

func (m *defaultHelpdocumentModel) FindOne(ctx context.Context, helpDocumentId int64) (*Helpdocument, error) {
	query := fmt.Sprintf("select %s from %s where `helpDocument_id` = ? limit 1", helpdocumentRows, m.table)
	var resp Helpdocument
	err := m.conn.QueryRowCtx(ctx, &resp, query, helpDocumentId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// FindAll 查询所有帮助文档
func (m *defaultHelpdocumentModel) FindAll(ctx context.Context) ([]*Helpdocument, error) {
	query := fmt.Sprintf("select %s from %s", helpdocumentRows, m.table)
	var resp []*Helpdocument
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//Edithelpdocument 修改帮助文档状态
func (m *defaultHelpdocumentModel) Edithelpdocument(ctx context.Context, helpDocumentId int64, documentStatus int64) error {
	query := fmt.Sprintf("update %s set `document_status` = ? where `helpDocument_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, documentStatus, helpDocumentId)
	return err
}


func (m *defaultHelpdocumentModel) Insert(ctx context.Context, data *Helpdocument) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, helpdocumentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.HelpDocumentId, data.DeletedAt, data.HelpCategoryId, data.DocumentStatus)
	return ret, err
}

func (m *defaultHelpdocumentModel) Update(ctx context.Context, data *Helpdocument) error {
	query := fmt.Sprintf("update %s set %s where `helpDocument_id` = ?", m.table, helpdocumentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.HelpCategoryId, data.DocumentStatus, data.HelpDocumentId)
	return err
}

func (m *defaultHelpdocumentModel) tableName() string {
	return m.table
}
