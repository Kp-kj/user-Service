// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	helpCategoryFieldNames          = builder.RawFieldNames(&HelpCategory{})
	helpCategoryRows                = strings.Join(helpCategoryFieldNames, ",")
	helpCategoryRowsExpectAutoSet   = strings.Join(stringx.Remove(helpCategoryFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	helpCategoryRowsWithPlaceHolder = strings.Join(stringx.Remove(helpCategoryFieldNames, "`helpCategory_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	helpCategoryModel interface {
		Insert(ctx context.Context, data *HelpCategory) (sql.Result, error)
		InsertReturnId(ctx context.Context, data *HelpCategory) (int64, error)
		FindOne(ctx context.Context, helpCategoryId int64) (*HelpCategory, error)
		Update(ctx context.Context, data *HelpCategory) error
		Delete(ctx context.Context, helpCategoryId int64) error
		FindAll(ctx context.Context) ([]*HelpCategory, error)
		CheckExistence(ctx context.Context, helpCategoryId int64) (bool, error)
		Edith(ctx context.Context, helpCategoryId int64, categoryStatus int64) error // 修改帮助分类状态
	}

	defaultHelpCategoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HelpCategory struct {
		HelpCategoryId int64        `db:"helpCategory_id"`
		CreatedAt      time.Time    `db:"created_at"`
		UpdatedAt      sql.NullTime `db:"updated_at"`
		DeletedAt      sql.NullTime `db:"deleted_at"`
		CategoryStatus int64        `db:"category_status"`
	}
)

func newHelpCategoryModel(conn sqlx.SqlConn) *defaultHelpCategoryModel {
	return &defaultHelpCategoryModel{
		conn:  conn,
		table: "`helpCategory`",
	}
}

//CheckExistence
func (m *defaultHelpCategoryModel) CheckExistence(ctx context.Context, helpCategoryId int64) (bool, error) {
	query := fmt.Sprintf("select * from %s where `helpCategory_id` = ?", m.table)
	var resp HelpCategory
	err := m.conn.QueryRowCtx(ctx, &resp, query, helpCategoryId)
	switch err {
	case nil:
		return true, nil
	case sqlc.ErrNotFound:
		return false, nil
	default:
		return false, err

	}
}


func (m *defaultHelpCategoryModel) Delete(ctx context.Context, helpCategoryId int64) error {
	query := fmt.Sprintf("delete from %s where `helpCategory_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, helpCategoryId)
	return err
}

func (m *defaultHelpCategoryModel) FindOne(ctx context.Context, helpCategoryId int64) (*HelpCategory, error) {
	query := fmt.Sprintf("select %s from %s where `helpCategory_id` = ? limit 1", helpCategoryRows, m.table)
	var resp HelpCategory
	err := m.conn.QueryRowCtx(ctx, &resp, query, helpCategoryId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// FindAll 找出所有 category_status = 1 的数据 也就是未被删除的数据
func (m *defaultHelpCategoryModel) FindAll(ctx context.Context) ([]*HelpCategory, error) {
	query:=fmt.Sprintf("select %s from %s where `category_status` = 1",helpCategoryRows,m.table)
	var resp []*HelpCategory
	err:=m.conn.QueryRowsCtx(ctx,&resp,query)
	switch err {
	case nil:
		return resp,nil
	case sqlc.ErrNotFound:
		return nil,ErrNotFound
	default:
		return nil,err
	}
}

func (m *defaultHelpCategoryModel) Edith(ctx context.Context,helpCategoryId int64,categoryStatus int64) error {
	query:=fmt.Sprintf("update %s set `category_status` = ? where `helpCategory_id` = ?",m.table)
	_,err:=m.conn.ExecCtx(ctx,query,categoryStatus,helpCategoryId)
	return err
}


//InsertReturnId(ctx context.Context, data *HelpCategory) (int64, error)
func (m *defaultHelpCategoryModel) InsertReturnId(ctx context.Context, data *HelpCategory) (int64, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, helpCategoryRowsExpectAutoSet)
	var resp sql.Result
	var err error
	if resp, err = m.conn.ExecCtx(ctx, query, data.DeletedAt, data.CategoryStatus); err != nil {
		return 0, err
	}
	return resp.LastInsertId()
}


func (m *defaultHelpCategoryModel) Insert(ctx context.Context, data *HelpCategory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, helpCategoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.HelpCategoryId, data.DeletedAt, data.CategoryStatus)
	return ret, err
}

func (m *defaultHelpCategoryModel) Update(ctx context.Context, data *HelpCategory) error {
	query := fmt.Sprintf("update %s set %s where `helpCategory_id` = ?", m.table, helpCategoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.CategoryStatus, data.HelpCategoryId)
	return err
}

func (m *defaultHelpCategoryModel) tableName() string {
	return m.table
}
