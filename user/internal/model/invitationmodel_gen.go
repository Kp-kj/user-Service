// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
	"time"
)

var (
	invitationFieldNames          = builder.RawFieldNames(&Invitation{})
	invitationRows                = strings.Join(invitationFieldNames, ",")
	invitationRowsExpectAutoSet   = strings.Join(stringx.Remove(invitationFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	invitationRowsWithPlaceHolder = strings.Join(stringx.Remove(invitationFieldNames, "`invitation_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	invitationModel interface {
		Insert(ctx context.Context, data *Invitation) (sql.Result, error)
		FindOne(ctx context.Context, invitationId int64) (*Invitation, error)
		FindOneByInvitationId(ctx context.Context, invitationId int64) (*Invitation, error)
		Update(ctx context.Context, data *Invitation) error
		Delete(ctx context.Context, invitationId int64) error
		CheckIfInviteExists(ctx context.Context, inviterID, inviteeID int64) (bool, error)
		CheckTodayInvite(ctx context.Context, inviterID int64) (bool, error)
		//TransCtx(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error
	}

	defaultInvitationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Invitation struct {
		InvitationId int64        `db:"invitation_id"`
		CreatedAt    time.Time    `db:"created_at"`
		UpdatedAt    sql.NullTime `db:"updated_at"`
		DeletedAt    sql.NullTime `db:"deleted_at"`
		InviterId    int64        `db:"inviter_id"`
		InviteeId    int64        `db:"invitee_id"`
	}
)

func newInvitationModel(conn sqlx.SqlConn) *defaultInvitationModel {
	return &defaultInvitationModel{
		conn:  conn,
		table: "`invitation`",
	}
}
// CheckIfInviteExists checks if the invite exists
func (m *defaultInvitationModel) CheckIfInviteExists(ctx context.Context, inviterID, inviteeID int64) (bool, error) {
	query := fmt.Sprintf("SELECT COUNT(*) FROM %s WHERE `inviter_id` = ? AND `invitee_id` = ?", m.table)
	var count int
	err := m.conn.QueryRow(&count, query, inviterID, inviteeID)
	if err != nil {
		return false, err
	}
	return count > 0, nil
}

func (m *defaultInvitationModel) Delete(ctx context.Context, invitationId int64) error {
	query := fmt.Sprintf("delete from %s where `invitation_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, invitationId)
	return err
}

// CheckTodayInvite checks if the inviter has invited today
func (m *defaultInvitationModel)CheckTodayInvite(ctx context.Context, inviterID int64) (bool,error) {
	now := time.Now()
	startOfToday := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
	endOfToday := time.Date(now.Year(), now.Month(), now.Day(), 23, 59, 59, 999999999, now.Location())

	query := fmt.Sprintf("SELECT COUNT(*) FROM %s WHERE `inviter_id` = ? AND `created_at` BETWEEN ? AND ?", m.table)
	var count int
	err := m.conn.QueryRow(&count, query, inviterID, startOfToday, endOfToday)
	if err!=nil{
		return false,err
	}
	return count>0,nil
}

func (m *defaultInvitationModel) FindOne(ctx context.Context, invitationId int64) (*Invitation, error) {
	query := fmt.Sprintf("select %s from %s where `invitation_id` = ? limit 1", invitationRows, m.table)
	var resp Invitation
	err := m.conn.QueryRowCtx(ctx, &resp, query, invitationId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInvitationModel) FindOneByInvitationId(ctx context.Context, invitationId int64) (*Invitation, error) {
	var resp Invitation
	query := fmt.Sprintf("select %s from %s where `invitation_id` = ? limit 1", invitationRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, invitationId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultInvitationModel) Insert(ctx context.Context, data *Invitation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, invitationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.InvitationId, data.DeletedAt, data.InviterId, data.InviteeId)
	return ret, err
}

func (m *defaultInvitationModel) Update(ctx context.Context, newData *Invitation) error {
	query := fmt.Sprintf("update %s set %s where `invitation_id` = ?", m.table, invitationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeletedAt, newData.InviterId, newData.InviteeId, newData.InvitationId)
	return err
}

//// 暴露给logic层的事务
//func (m *defaultInvitationModel) TransCtx(ctx context.Context,fn func(ctx context.Context,session sqlx.Session)error) error{
//	return m.TransCtx(ctx, func(ctx context.Context, s sqlx.Session) error {
//		return fn(ctx, s)
//	})
//}


func (m *defaultInvitationModel) tableName() string {
	return m.table
}


