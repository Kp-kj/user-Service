// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"


	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	blackFieldNames          = builder.RawFieldNames(&Black{})
	blackRows                = strings.Join(blackFieldNames, ",")
	blackRowsExpectAutoSet   = strings.Join(stringx.Remove(blackFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	blackRowsWithPlaceHolder = strings.Join(stringx.Remove(blackFieldNames, "`black_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	blackModel interface {
		Insert(ctx context.Context, data *Black) (sql.Result, error)
		FindOne(ctx context.Context, blackId int64) (*Black, error)
		FindOneByBlackId(ctx context.Context, blackId int64) (*Black, error)
		Update(ctx context.Context, data *Black) error
		Delete(ctx context.Context, blackId int64) error
	}

	defaultBlackModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Black struct {
		BlackId     int64        `db:"black_id"`
		CreatedAt   time.Time    `db:"created_at"`
		UpdatedAt   sql.NullTime `db:"updated_at"`
		DeletedAt   sql.NullTime `db:"deleted_at"`
		UserId      int64        `db:"user_id"`
		BlackUserId int64        `db:"black_user_id"`
		StartTime   time.Time    `db:"start_time"`
		EndTime     time.Time    `db:"end_time"`
		BlackType   int64        `db:"black_type"`
	}
)

func newBlackModel(conn sqlx.SqlConn) *defaultBlackModel {
	return &defaultBlackModel{
		conn:  conn,
		table: "`black`",
	}
}

func (m *defaultBlackModel) Delete(ctx context.Context, blackId int64) error {
	query := fmt.Sprintf("delete from %s where `black_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, blackId)
	return err
}

func (m *defaultBlackModel) FindOne(ctx context.Context, blackId int64) (*Black, error) {
	query := fmt.Sprintf("select %s from %s where `black_id` = ? limit 1", blackRows, m.table)
	var resp Black
	err := m.conn.QueryRowCtx(ctx, &resp, query, blackId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBlackModel) FindOneByBlackId(ctx context.Context, blackId int64) (*Black, error) {
	var resp Black
	query := fmt.Sprintf("select %s from %s where `black_id` = ? limit 1", blackRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, blackId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBlackModel) Insert(ctx context.Context, data *Black) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, blackRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BlackId, data.DeletedAt, data.UserId, data.BlackUserId, data.StartTime, data.EndTime, data.BlackType)
	return ret, err
}

func (m *defaultBlackModel) Update(ctx context.Context, newData *Black) error {
	query := fmt.Sprintf("update %s set %s where `black_id` = ?", m.table, blackRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeletedAt, newData.UserId, newData.BlackUserId, newData.StartTime, newData.EndTime, newData.BlackType, newData.BlackId)
	return err
}

func (m *defaultBlackModel) tableName() string {
	return m.table
}
