// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	recordNoticeFieldNames          = builder.RawFieldNames(&RecordNotice{})
	recordNoticeRows                = strings.Join(recordNoticeFieldNames, ",")
	recordNoticeRowsExpectAutoSet   = strings.Join(stringx.Remove(recordNoticeFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	recordNoticeRowsWithPlaceHolder = strings.Join(stringx.Remove(recordNoticeFieldNames, "`recordNotice_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	recordNoticeModel interface {
		Insert(ctx context.Context, data *RecordNotice) (sql.Result, error)
		FindOne(ctx context.Context, recordNoticeId int64) (*RecordNotice, error)
		Update(ctx context.Context, data *RecordNotice) error
		Delete(ctx context.Context, recordNoticeId int64) error
		FindOneBySystemNoticeIdOrUserNoticeId(ctx context.Context, NoticeId  int64) (*RecordNotice, error)
		FindOneByUserIdAndRecordNoticeCategoryAndRecordNoticeStatusOrderLimitAndSort(ctx context.Context, userId int64, recordNoticeCategory int64, recordNoticeStatus int64, limit int64, sort int64) ([]*RecordNotice, error)
		FindByUserIdAndRecordNoticeCategoryAndRecordNoticeStatusOrderLimitAndSortWithLastNoticeID(ctx context.Context, userId int64, recordNoticeCategory int64, recordNoticeStatus int64, lastNoticeId string, limit int64, sort int64) ([]*RecordNotice, error)
	}
	defaultRecordNoticeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RecordNotice struct {
		RecordNoticeId       int64         `db:"recordNotice_id"`
		CreatedAt            time.Time     `db:"created_at"`
		UpdatedAt            sql.NullTime  `db:"updated_at"`
		DeletedAt            sql.NullTime  `db:"deleted_at"`
		UserId               int64         `db:"user_id"`
		SystemNoticeId       int64 `db:"systemNotice_id"`
		UserNoticeId         int64 `db:"userNotice_id"`
		RecordNoticeCategory int64         `db:"recordNotice_category"`
		RecordNoticeStatus   int64         `db:"recordNotice_status"`
	}
)

func newRecordNoticeModel(conn sqlx.SqlConn) *defaultRecordNoticeModel {
	return &defaultRecordNoticeModel{
		conn:  conn,
		table: "`recordNotice`",
	}
}

func (m *defaultRecordNoticeModel) Delete(ctx context.Context, recordNoticeId int64) error {
	query := fmt.Sprintf("delete from %s where `recordNotice_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, recordNoticeId)
	return err
}

func (m *defaultRecordNoticeModel) FindOne(ctx context.Context, recordNoticeId int64) (*RecordNotice, error) {
	query := fmt.Sprintf("select %s from %s where `recordNotice_id` = ? limit 1", recordNoticeRows, m.table)
	var resp RecordNotice
	err := m.conn.QueryRowCtx(ctx, &resp, query, recordNoticeId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}


}

//FindOneByUserIdAndRecordNoticeCategoryAndRecordNoticeStatusOrderLimitAndSort
func (m *defaultRecordNoticeModel) FindOneByUserIdAndRecordNoticeCategoryAndRecordNoticeStatusOrderLimitAndSort(ctx context.Context, userId int64, recordNoticeCategory int64, recordNoticeStatus int64, limit int64, sort int64) ([]*RecordNotice, error) {
	var query string
	var args []interface{}

	if recordNoticeCategory == 2 {
		query = fmt.Sprintf("select %s from %s where `user_id` = ? ", recordNoticeRows, m.table)
		args = append(args, userId)
	} else {
		query = fmt.Sprintf("select %s from %s where `user_id` = ? and `recordNotice_category` = ? ", recordNoticeRows, m.table)
		args = append(args, userId, recordNoticeCategory)
	}

	if recordNoticeStatus == 2 {
		query += " "
	} else {
		query += " and `recordNotice_status` = ? "
		args = append(args, recordNoticeStatus)
	}

	query += " order by `created_at` desc limit ? "
	args = append(args, limit)

	if sort == 1 {
		query += " "
	} else {
		query += " offset ? "
		args = append(args, sort)
	}

	var list []*RecordNotice
	err := m.conn.QueryRowsCtx(ctx, &list, query, args...)
	switch err {
	case nil:
		return list, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//FindOneBySystemNoticeIdOrUserNoticeId(ctx context.Context, NoticeId  int64) (*RecordNotice, error)
func (m *defaultRecordNoticeModel) FindOneBySystemNoticeIdOrUserNoticeId(ctx context.Context, NoticeId  int64) (*RecordNotice, error) {
	//查看systemNoticeId或userNoticeId是否有和NoticeId相同的
	query := fmt.Sprintf("select %s from %s where `systemNotice_id` = ? or `userNotice_id` = ? limit 1", recordNoticeRows, m.table)
	var resp RecordNotice
	err := m.conn.QueryRowCtx(ctx, &resp, query, NoticeId, NoticeId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


//FindByUserIdAndRecordNoticeCategoryAndRecordNoticeStatusOrderLimitAndSortWithLastNoticeID
func (m *defaultRecordNoticeModel) FindByUserIdAndRecordNoticeCategoryAndRecordNoticeStatusOrderLimitAndSortWithLastNoticeID(ctx context.Context, userId int64, recordNoticeCategory int64, recordNoticeStatus int64, lastNoticeId string, limit int64, sort int64) ([]*RecordNotice, error) {
	var query string
	var args []interface{}

	if recordNoticeCategory == 2 {
		query = fmt.Sprintf("SELECT %s FROM %s WHERE `user_id` = ? ", recordNoticeRows, m.table)
		args = append(args, userId)
	} else {
		query = fmt.Sprintf("SELECT %s FROM %s WHERE `user_id` = ? AND `recordNotice_category` = ? ", recordNoticeRows, m.table)
		args = append(args, userId, recordNoticeCategory)
	}

	if recordNoticeStatus == 2 {
		query += " "
	} else {
		query += " AND `recordNotice_status` = ? "
		args = append(args, recordNoticeStatus)
	}

	query += " AND `notice_id` > ? ORDER BY `notice_id` ASC LIMIT ? "
	args = append(args, lastNoticeId, limit)

	if sort == 1 {
		query += " "
	} else {
		query += " OFFSET ? "
		args = append(args, sort)
	}

	var list []*RecordNotice
	err := m.conn.QueryRowsCtx(ctx, &list, query, args...)
	switch err {
	case nil:
		return list, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultRecordNoticeModel) Insert(ctx context.Context, data *RecordNotice) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, recordNoticeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RecordNoticeId, data.DeletedAt, data.UserId, data.SystemNoticeId, data.UserNoticeId, data.RecordNoticeCategory, data.RecordNoticeStatus)
	return ret, err
}

func (m *defaultRecordNoticeModel) Update(ctx context.Context, data *RecordNotice) error {
	query := fmt.Sprintf("update %s set %s where `recordNotice_id` = ?", m.table, recordNoticeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.UserId, data.SystemNoticeId, data.UserNoticeId, data.RecordNoticeCategory, data.RecordNoticeStatus, data.RecordNoticeId)
	return err
}

func (m *defaultRecordNoticeModel) tableName() string {
	return m.table
}
